# V-Learning Platform Configuration
global:
  namespace: v-learning
  imageTag: test-2

# Horizontal Pod Autoscaler Configuration
hpa:
  enabled: true
  # Default HPA settings for all microservices
  default:
    minReplicas: 1
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
    scaleDown:
      stabilizationWindowSeconds: 300
      percentValue: 10
      periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      percentValue: 50
      periodSeconds: 60
  # Per-service HPA overrides
  userService:
    enabled: true
    minReplicas: 2
    maxReplicas: 5
    targetCPUUtilizationPercentage: 75
  courseService:
    enabled: true
    minReplicas: 2
    maxReplicas: 8
    targetCPUUtilizationPercentage: 70
  contentService:
    enabled: true
    minReplicas: 1
    maxReplicas: 6
    targetCPUUtilizationPercentage: 80
  enrollmentService:
    enabled: true
    minReplicas: 1
    maxReplicas: 4
    targetCPUUtilizationPercentage: 75
  certificateService:
    enabled: true
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
  # PostgreSQL HA HPA Configuration
  postgresHA:
    enabled: true
    pgpool:
      minReplicas: 2
      maxReplicas: 5
      targetCPUUtilizationPercentage: 75
      targetMemoryUtilizationPercentage: 80

# Resource requests and limits for microservices
resources:
  userService:
    requests:
      cpu: "100m"
      memory: "256Mi"
    limits:
      cpu: "500m"
      memory: "512Mi"
  courseService:
    requests:
      cpu: "100m"
      memory: "256Mi"
    limits:
      cpu: "500m"
      memory: "512Mi"
  contentService:
    requests:
      cpu: "100m"
      memory: "256Mi"
    limits:
      cpu: "500m"
      memory: "512Mi"
  enrollmentService:
    requests:
      cpu: "100m"
      memory: "256Mi"
    limits:
      cpu: "500m"
      memory: "512Mi"
  certificateService:
    requests:
      cpu: "100m"
      memory: "256Mi"
    limits:
      cpu: "500m"
      memory: "512Mi"

# Database Configuration
postgres:
  enabled: false  # Disabled - using PostgreSQL HA instead
  image: postgres:15-alpine
  database: pfe_learning
  username: pfe_user
  password: "123456"

# PostgreSQL High Availability Configuration
postgresql-ha:
  global:
    imageRegistry: ""
  postgresql:
    replicaCount: 3
    image:
      registry: docker.io
      repository: bitnami/postgresql-repmgr
      tag: "16.6.0-debian-12-r0"
    auth:
      enablePostgresUser: true
      postgresPassword: "123456"
      username: "pfe_user"
      password: "123456"
      database: "pfe_learning"
    primary:
      persistence:
        enabled: true
        size: 8Gi
        storageClass: ""
      resources:
        requests:
          memory: "256Mi"
          cpu: "250m"
        limits:
          memory: "1Gi"
          cpu: "1000m"
    readReplicas:
      persistence:
        enabled: true
        size: 8Gi
        storageClass: ""
      resources:
        requests:
          memory: "256Mi"
          cpu: "250m"
        limits:
          memory: "1Gi"
          cpu: "1000m"
  pgpool:
    replicaCount: 2
    image:
      registry: docker.io
      repository: bitnami/pgpool
      tag: "4.5.4-debian-12-r7"
    adminUsername: "admin"
    adminPassword: "adminpassword123"
    resources:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "256Mi"
        cpu: "500m"
  metrics:
    enabled: false

# PostgreSQL HA Control (for our templates)
postgresHA:
  enabled: true

# Service Discovery
eureka:
  enabled: true
  port: 8761

# API Gateway
gateway:
  enabled: true
  port: 8080
  nodePort: 30081

# Microservices
userService:
  enabled: true
  port: 8081

courseService:
  enabled: true
  port: 8082

contentService:
  enabled: true
  port: 8083

enrollmentService:
  enabled: true
  port: 8084

certificateService:
  enabled: true
  port: 8085

# Frontend
frontend:
  enabled: true
  port: 4200
  nodePort: 30421
